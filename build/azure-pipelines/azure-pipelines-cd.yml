# Continuous Delivery Pipeline
# https://aka.ms/yaml

resources:        # types: pipelines | builds | repositories | containers | packages
  pipelines:
  - pipeline: 'CI'  # identifier for the resource used in pipeline resource variables
    source: 'jasoth.ADAL.PS.CI'  # name of the pipeline that produces an artifact
    branch: master

parameters:
- name: vmImage
  displayName: 'Pool Image'
  type: string
  default: windows-latest
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest

trigger: none
#  batch: true
#  branches:
#    include:
#    - master
#  paths:
#    include:
#    - src/*

pr: none

variables:
  moduleName: 'ADAL.PS'
  moduleVersion.MajorMinorBuild: '5.2.7' # Manually adjust the version number as needed for semantic versioning.
  moduleVersion.Revision: '$[counter(variables.moduleVersion.MajorMinorBuild, 1)]' # Revision is auto-incremented.
  moduleVersion: '$(moduleVersion.MajorMinorBuild).$(moduleVersion.Revision)'
  vmImage: '${{ parameters.vmImage }}'
  artifactModule: 'PSModule'
  artifactModuleSigned: 'PSModuleSigned'
  artifactModulePackage: 'PSModulePackage'

pool:
  vmImage: $(vmImage)

stages:
- stage: FinalizeBuild
  jobs: 
  - job: Prepare
    variables:
      #moduleVersion.Prefix: '$[ dependencies.Prepare.outputs[''ModuleParameters.version.Microsoft.IdentityModel.Clients.ActiveDirectory''] ]'
      skipComponentGovernanceDetection: true
    steps:
    #- checkout: none
    - download: CI
      artifact: '$(artifactModule)'
    - task: PowerShell@2
      name: ModuleParameters
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/CI/$(artifactModule)/*/*.psd1" -TrimRevisionNumber'
        pwsh: true

  - job: Build
    dependsOn: Prepare
    variables:
      moduleName: '$[ dependencies.Prepare.outputs[''ModuleParameters.moduleName''] ]'
      moduleVersion.Prefix: '$[ dependencies.Prepare.outputs[''ModuleParameters.moduleVersion''] ]'
      moduleVersion.Revision: '$[ counter(variables[''moduleVersion.Prefix''], 1) ]'
      moduleVersion: '$[ coalesce(variables[''moduleVersionOverride''], format(''{0}.{1}'', variables[''moduleVersion.Prefix''], variables[''moduleVersion.Revision''])) ]'
      skipComponentGovernanceDetection: true
    steps:
    - task: PowerShell@2
      displayName: 'Update PowerShell Module Manifest'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Update-PSModuleManifest.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModule)/$(moduleName)/$(moduleName).psd1" -ModuleVersion "$(moduleVersion)"'
        pwsh: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish PowerShell Module Artifact'
      inputs:
        targetPath: '$(Pipeline.Workspace)/$(artifactModule)'
        artifact: '$(artifactModule)'
        publishLocation: 'pipeline'

  - job: Sign
    dependsOn:
    - Prepare
    - Build
    variables:
      moduleName: '$[ dependencies.Prepare.outputs[''ModuleParameters.moduleName''] ]'
      skipComponentGovernanceDetection: true
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: '$(artifactModule)'
    - template: template-psmodule-sign.yml
      parameters:
        moduleName: '$(moduleName)'
        #pipelineId: 'CI'

- stage: Package
  displayName: 'Standalone Package'
  dependsOn: FinalizeBuild
  jobs: 
  - job: Prepare
    variables:
      skipComponentGovernanceDetection: true
    steps:
    - download: current
      artifact: '$(artifactModuleSigned)'
    - task: PowerShell@2
      name: ModuleParameters
      displayName: 'Get Parameters for PowerShell Module'
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/build/Get-PSModuleInfo.ps1'
        arguments: '-ModuleManifestPath "$(Pipeline.Workspace)/$(artifactModuleSigned)/*/*.psd1"'
        pwsh: true

  - deployment: Package
    environment: Standalone
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-package.yml
            parameters:
              moduleName: '$(ModuleParameters.moduleName)'
              moduleVersion: '$(ModuleParameters.moduleVersion)'

- stage: Test
  dependsOn: FinalizeBuild
  jobs: 
  - deployment: Publish
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-publish.yml
            parameters:
              moduleName: '$(moduleName)'
              RepositorySourceLocation: 'https://www.poshtestgallery.com/api/v2'
              NuGetApiKeySecretName: 'PSTestGallery-API-Key'

- stage: Production
  dependsOn: FinalizeBuild
  jobs: 
  - deployment: Publish
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - template: template-psmodule-publish.yml
            parameters:
              moduleName: '$(moduleName)'
              RepositorySourceLocation: 'https://www.poshtestgallery.com/api/v2'
              NuGetApiKeySecretName: 'PSTestGallery-API-Key'
